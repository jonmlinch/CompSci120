Script started on 2024-02-15 16:36:18-08:00
bash-4.4$ pwd
/home/linc2706/labs/lab5
bash-4.4$ fk[K[Kg++ flip.cpp
bash-4.4$ ./a.out
Please enter the first number to be flipped:
5
Please enter the second number to be flipped:
6
Your first number is 5 and your second number is 6
Flipping...
Your new first number is 6 and your new second number is 5
Mission Accomplished!
bash-4.4$ ./a.out
Please enter the first number to be flipped:
9
Please enter the second number to be flipped:
1
Your first number is 9 and your second number is 1
Flipping...
Your new first number is 1 and your new second number is 9
Mission Accomplished!
bash-4.4$ ./a.out
Please enter the first number to be flipped:
23456
Please enter the second number to be flipped:
98765
Your first number is 23456 and your second number is 98765
Flipping...
Your new first number is 98765 and your new second number is 23456
Mission Accomplished!
bash-4.4$ exit
exit

Script done on 2024-02-15 16:37:25-08:00

Answers to Lab 5 questions:
Question 1) Could you write the code for the definition of the flip() function so that the values of x and y are switched? (so that x becomes 20 and y becomes 7.) Why or why not?
Answer 1): 
As things are laid out in the example, you could not write code to flip the x, y variable values in the flip(). 
The reason for this that when x and y are passed into the flip function we are passing a copied value of x, y but not the original references. 
So when x and y get flipped in the function it has not impact on the original values in the main function. 

Question 2) What do you notice about how the value of x changes after function1() is called?
Answer 2):
After function 1 runs, the logged value of x remains the same as the original value even though it is multiplied by 2 in the function.
However, if I were to log the x variable INSIDE function 1 then I would see a value of 14


Question 3) What do you notice about how the value of x changes after function2() is called?
Answer 3):
The value of x that is logged is 14. This is the value that would be expected from the multiplication by 2 that function 2 does.
This is possible because we are passing a reference to the original value instead of a copy of the value.


Question 4) What is the difference in code between function1() and function2() besides the name of the functions?
Anser 4): 
This dfference in the code is the presence of the & which is used in function 2 and notes that the argument is a reference vs a value. 
With the & we are using a pass-by-reference technique which uses a reference to the actual variable that is passed in. 
Function 1 uses a pass-by-value approach which makes a copy of the values associated with the variable passes as arguments. 

